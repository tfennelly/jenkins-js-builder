var ___$$$___jsModules = require('@jenkins-cd/js-modules');

___$$$___jsModules.whoami('{{#if bundle.bundleExportNamespace}}{{bundle.bundleExportNamespace}}:{{/if}}{{bundle.as}}');

/*** Start Module Exec Function ***************************************/
function ___$$$___exec(onExec) {
    {{content}}
    {{#if bundle.doOnExecCall}}onExec();{{/if}}
}
/*** End Module Exec Function   ***************************************/

function ___$$$___doExports() {
    // Do exports, if any ....
    {{#if entryExport}}___$$$___jsModules.exportModule({{entryExport.namespace}}, '{{bundle.as}}', {{entryExport.module}});{{/if}}

    {{#if dependencyExports}}
        function doDependencyExport(module, normalizedPackageName, jsModuleNames) {
            ___$$$___jsModules.exportModule(normalizedPackageName, jsModuleNames.patch, module);
            ___$$$___jsModules.exportModule(normalizedPackageName, jsModuleNames.minor, module);
            ___$$$___jsModules.exportModule(normalizedPackageName, jsModuleNames.major, module);
            ___$$$___jsModules.exportModule(normalizedPackageName, jsModuleNames.any, module);
        }

        {{#each dependencyExports}}
        doDependencyExport(require('{{packageName}}'), '{{normalizedPackageName}}', {
            patch: '{{jsModuleNames.patch}}',
            minor: '{{jsModuleNames.minor}}',
            major: '{{jsModuleNames.major}}',
            any: '{{jsModuleNames.any}}'
        });
        {{/each}}
    {{/if}}
}

function ___$$$___doCSS() {
    {{#each css}}
    ___$$$___jsModules.addModuleCSSToPage('{{namespace}}', '{{getLoadBundleName}}');
    {{/each}}
}

function ___$$$___doBundleInit() {
    try {
        ___$$$___exec(function() {
            ___$$$___doExports();
            ___$$$___doCSS();
        });
    } catch (e) {
        console.error('Error initializing Jenkins JavaScript bundle "{{bundle.as}}"', e);
    }
}

if (___$$$___requiredModuleMappings.length > 0) {
    ___$$$___jsModules.importModule.apply(___$$$___jsModules.importModule, ___$$$___requiredModuleMappings)
        .onFulfilled(function() {
        ___$$$___doBundleInit();
    });
} else {
    ___$$$___doBundleInit();
}